{"ast":null,"code":"const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api';// Utilisateurs fictifs pour la démonstration\nconst mockUsers=[{id:1,name:'Utilisateur Test',email:'test@example.com',password:'password123'},{id:2,name:'Admin',email:'admin@example.com',password:'admin123'}];// Version fictive de l'authentification pour les démonstrations\nexport const loginUser=async(email,password)=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,500));// Chercher l'utilisateur dans notre liste fictive\nconst user=mockUsers.find(u=>u.email===email);// Vérifier l'authentification\nif(!user||user.password!==password){throw new Error('Email ou mot de passe incorrect');}// Créer un faux token JWT\nconst token='mock-jwt-token-'+Date.now();// Créer une réponse similaire à celle d'une API réelle\nreturn{token,user:{id:user.id,name:user.name,email:user.email}};};export const registerUser=async(name,email,password)=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,500));// Vérifier si l'email existe déjà\nif(mockUsers.some(u=>u.email===email)){throw new Error('Cet email est déjà utilisé');}// Créer un nouvel utilisateur fictif\nconst newUser={id:mockUsers.length+1,name,email,password};// Ajouter à la liste des utilisateurs fictifs\nmockUsers.push(newUser);// Créer un faux token JWT\nconst token='mock-jwt-token-'+Date.now();return{token,user:{id:newUser.id,name:newUser.name,email:newUser.email}};};export const getUser=async token=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,300));// Vérifier si le token est valide (dans un cas réel, on déchiffrerait le JWT)\nif(!token||!token.startsWith('mock-jwt-token-')){throw new Error('Session expirée');}// Pour la démo, on retourne l'utilisateur avec l'ID 1\nconst user=mockUsers[0];return{id:user.id,name:user.name,email:user.email};};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","mockUsers","id","name","email","password","loginUser","Promise","resolve","setTimeout","user","find","u","Error","token","Date","now","registerUser","some","newUser","length","push","getUser","startsWith"],"sources":["/root/projet/module-133-classe-300231-valleliant/projet/client1/src/services/authService.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Utilisateurs fictifs pour la démonstration\nconst mockUsers = [\n  {\n    id: 1,\n    name: 'Utilisateur Test',\n    email: 'test@example.com',\n    password: 'password123'\n  },\n  {\n    id: 2,\n    name: 'Admin',\n    email: 'admin@example.com',\n    password: 'admin123'\n  }\n];\n\n// Version fictive de l'authentification pour les démonstrations\nexport const loginUser = async (email, password) => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Chercher l'utilisateur dans notre liste fictive\n  const user = mockUsers.find(u => u.email === email);\n\n  // Vérifier l'authentification\n  if (!user || user.password !== password) {\n    throw new Error('Email ou mot de passe incorrect');\n  }\n\n  // Créer un faux token JWT\n  const token = 'mock-jwt-token-' + Date.now();\n  \n  // Créer une réponse similaire à celle d'une API réelle\n  return {\n    token,\n    user: {\n      id: user.id,\n      name: user.name,\n      email: user.email\n    }\n  };\n};\n\nexport const registerUser = async (name, email, password) => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Vérifier si l'email existe déjà\n  if (mockUsers.some(u => u.email === email)) {\n    throw new Error('Cet email est déjà utilisé');\n  }\n\n  // Créer un nouvel utilisateur fictif\n  const newUser = {\n    id: mockUsers.length + 1,\n    name,\n    email,\n    password\n  };\n\n  // Ajouter à la liste des utilisateurs fictifs\n  mockUsers.push(newUser);\n\n  // Créer un faux token JWT\n  const token = 'mock-jwt-token-' + Date.now();\n  \n  return {\n    token,\n    user: {\n      id: newUser.id,\n      name: newUser.name,\n      email: newUser.email\n    }\n  };\n};\n\nexport const getUser = async (token) => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 300));\n\n  // Vérifier si le token est valide (dans un cas réel, on déchiffrerait le JWT)\n  if (!token || !token.startsWith('mock-jwt-token-')) {\n    throw new Error('Session expirée');\n  }\n\n  // Pour la démo, on retourne l'utilisateur avec l'ID 1\n  const user = mockUsers[0];\n  \n  return {\n    id: user.id,\n    name: user.name,\n    email: user.email\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}