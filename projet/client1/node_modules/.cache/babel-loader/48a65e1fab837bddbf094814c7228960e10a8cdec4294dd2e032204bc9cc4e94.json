{"ast":null,"code":"const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api';// Données fictives pour les tournois\nconst mockTournaments=[{id:1,name:'Tournoi de Printemps 2023',description:'Compétition annuelle ouverte à tous les joueurs',startDate:'2023-04-15',endDate:'2023-04-30',teams:[]},{id:2,name:'Championnat régional',description:'Championnat officiel de la région',startDate:'2023-05-10',endDate:'2023-05-25',teams:[]},{id:3,name:'Coupe des Champions',description:'Tournoi réservé aux équipes d\\'élite',startDate:'2023-06-05',endDate:'2023-06-20',teams:[]}];// Données fictives pour les équipes\nexport const mockTeams=[{id:1,name:'Les Aigles',tournamentId:1,captain:{id:1,name:'Utilisateur Test',email:'test@example.com'},members:[{id:1,name:'Utilisateur Test',email:'test@example.com'}],maxMembers:5},{id:2,name:'Les Loups',tournamentId:1,captain:{id:2,name:'Admin',email:'admin@example.com'},members:[{id:2,name:'Admin',email:'admin@example.com'}],maxMembers:5}];// Lier les équipes aux tournois\nmockTeams.forEach(team=>{const tournament=mockTournaments.find(t=>t.id===team.tournamentId);if(tournament){tournament.teams.push(team);}});export const getAllTournaments=async()=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,500));return[...mockTournaments];};export const getTournamentById=async tournamentId=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,300));const id=parseInt(tournamentId,10);const tournament=mockTournaments.find(t=>t.id===id);if(!tournament){throw new Error('Tournoi non trouvé');}return{...tournament};};export const createTeam=async(tournamentId,teamName)=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,700));// Récupérer l'utilisateur depuis le localStorage (simulation d'un utilisateur connecté)\nconst userStr=localStorage.getItem('user');if(!userStr){throw new Error('Vous devez être connecté pour créer une équipe');}const user=JSON.parse(userStr);const tid=parseInt(tournamentId,10);// Vérifier si le tournoi existe\nconst tournament=mockTournaments.find(t=>t.id===tid);if(!tournament){throw new Error('Tournoi non trouvé');}// Créer une nouvelle équipe\nconst newTeam={id:mockTeams.length+1,name:teamName,tournamentId:tid,captain:{id:user.id,name:user.name,email:user.email},members:[{id:user.id,name:user.name,email:user.email}],maxMembers:5};// Ajouter l'équipe à la liste et au tournoi\nmockTeams.push(newTeam);tournament.teams.push(newTeam);return{...newTeam};};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","mockTournaments","id","name","description","startDate","endDate","teams","mockTeams","tournamentId","captain","email","members","maxMembers","forEach","team","tournament","find","t","push","getAllTournaments","Promise","resolve","setTimeout","getTournamentById","parseInt","Error","createTeam","teamName","userStr","localStorage","getItem","user","JSON","parse","tid","newTeam","length"],"sources":["/root/projet/module-133-classe-300231-valleliant/projet/client1/src/services/tournamentService.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Données fictives pour les tournois\nconst mockTournaments = [\n  {\n    id: 1,\n    name: 'Tournoi de Printemps 2023',\n    description: 'Compétition annuelle ouverte à tous les joueurs',\n    startDate: '2023-04-15',\n    endDate: '2023-04-30',\n    teams: []\n  },\n  {\n    id: 2,\n    name: 'Championnat régional',\n    description: 'Championnat officiel de la région',\n    startDate: '2023-05-10',\n    endDate: '2023-05-25',\n    teams: []\n  },\n  {\n    id: 3,\n    name: 'Coupe des Champions',\n    description: 'Tournoi réservé aux équipes d\\'élite',\n    startDate: '2023-06-05',\n    endDate: '2023-06-20',\n    teams: []\n  }\n];\n\n// Données fictives pour les équipes\nexport const mockTeams = [\n  {\n    id: 1,\n    name: 'Les Aigles',\n    tournamentId: 1,\n    captain: { id: 1, name: 'Utilisateur Test', email: 'test@example.com' },\n    members: [\n      { id: 1, name: 'Utilisateur Test', email: 'test@example.com' }\n    ],\n    maxMembers: 5\n  },\n  {\n    id: 2,\n    name: 'Les Loups',\n    tournamentId: 1,\n    captain: { id: 2, name: 'Admin', email: 'admin@example.com' },\n    members: [\n      { id: 2, name: 'Admin', email: 'admin@example.com' }\n    ],\n    maxMembers: 5\n  }\n];\n\n// Lier les équipes aux tournois\nmockTeams.forEach(team => {\n  const tournament = mockTournaments.find(t => t.id === team.tournamentId);\n  if (tournament) {\n    tournament.teams.push(team);\n  }\n});\n\nexport const getAllTournaments = async () => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  return [...mockTournaments];\n};\n\nexport const getTournamentById = async (tournamentId) => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  const id = parseInt(tournamentId, 10);\n  const tournament = mockTournaments.find(t => t.id === id);\n  \n  if (!tournament) {\n    throw new Error('Tournoi non trouvé');\n  }\n  \n  return { ...tournament };\n};\n\nexport const createTeam = async (tournamentId, teamName) => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 700));\n  \n  // Récupérer l'utilisateur depuis le localStorage (simulation d'un utilisateur connecté)\n  const userStr = localStorage.getItem('user');\n  if (!userStr) {\n    throw new Error('Vous devez être connecté pour créer une équipe');\n  }\n  \n  const user = JSON.parse(userStr);\n  const tid = parseInt(tournamentId, 10);\n  \n  // Vérifier si le tournoi existe\n  const tournament = mockTournaments.find(t => t.id === tid);\n  if (!tournament) {\n    throw new Error('Tournoi non trouvé');\n  }\n  \n  // Créer une nouvelle équipe\n  const newTeam = {\n    id: mockTeams.length + 1,\n    name: teamName,\n    tournamentId: tid,\n    captain: {\n      id: user.id,\n      name: user.name,\n      email: user.email\n    },\n    members: [\n      {\n        id: user.id,\n        name: user.name,\n        email: user.email\n      }\n    ],\n    maxMembers: 5\n  };\n  \n  // Ajouter l'équipe à la liste et au tournoi\n  mockTeams.push(newTeam);\n  tournament.teams.push(newTeam);\n  \n  return { ...newTeam };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}