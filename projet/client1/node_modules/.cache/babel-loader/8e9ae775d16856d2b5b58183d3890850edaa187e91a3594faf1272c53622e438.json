{"ast":null,"code":"import{mockTeams}from'./tournamentService';// Données fictives pour les classements\nconst mockRankings=[{id:1,name:'Classement Tournoi de Printemps 2023',tournamentId:1,teams:[{teamId:1,position:1,points:10,matchesPlayed:3,wins:3,draws:0,losses:0},{teamId:2,position:2,points:7,matchesPlayed:3,wins:2,draws:1,losses:0}]},{id:2,name:'Classement Championnat régional',tournamentId:2,teams:[]},{id:3,name:'Classement Coupe des Champions',tournamentId:3,teams:[]}];// Récupérer le classement pour un tournoi spécifique\nexport const getRankingByTournament=async tournamentId=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,300));const tid=parseInt(tournamentId,10);const ranking=mockRankings.find(r=>r.tournamentId===tid);if(!ranking){throw new Error('Classement non trouvé');}// Obtenir les détails complets des équipes\nconst teamsWithDetails=ranking.teams.map(teamRanking=>{const team=mockTeams.find(t=>t.id===teamRanking.teamId);return{...teamRanking,team};});return{...ranking,teamsWithDetails};};// Mettre à jour le classement d'une équipe\nexport const updateTeamRanking=async(rankingId,teamId,updateData)=>{// Simuler une latence réseau\nawait new Promise(resolve=>setTimeout(resolve,500));const rid=parseInt(rankingId,10);const tid=parseInt(teamId,10);const ranking=mockRankings.find(r=>r.id===rid);if(!ranking){throw new Error('Classement non trouvé');}// Trouver l'équipe dans le classement\nconst teamIndex=ranking.teams.findIndex(t=>t.teamId===tid);if(teamIndex===-1){// Si l'équipe n'existe pas dans le classement, l'ajouter\nranking.teams.push({teamId:tid,position:ranking.teams.length+1,points:updateData.points||0,matchesPlayed:updateData.matchesPlayed||0,wins:updateData.wins||0,draws:updateData.draws||0,losses:updateData.losses||0});}else{// Mettre à jour les statistiques de l'équipe\nranking.teams[teamIndex]={...ranking.teams[teamIndex],...updateData};}// Recalculer les positions en fonction des points\nranking.teams.sort((a,b)=>b.points-a.points);ranking.teams.forEach((team,index)=>{team.position=index+1;});return{success:true};};","map":{"version":3,"names":["mockTeams","mockRankings","id","name","tournamentId","teams","teamId","position","points","matchesPlayed","wins","draws","losses","getRankingByTournament","Promise","resolve","setTimeout","tid","parseInt","ranking","find","r","Error","teamsWithDetails","map","teamRanking","team","t","updateTeamRanking","rankingId","updateData","rid","teamIndex","findIndex","push","length","sort","a","b","forEach","index","success"],"sources":["/root/projet/module-133-classe-300231-valleliant/projet/client1/src/services/rankingService.js"],"sourcesContent":["import { mockTeams } from './tournamentService';\n\n// Données fictives pour les classements\nconst mockRankings = [\n  {\n    id: 1,\n    name: 'Classement Tournoi de Printemps 2023',\n    tournamentId: 1,\n    teams: [\n      {\n        teamId: 1,\n        position: 1,\n        points: 10,\n        matchesPlayed: 3,\n        wins: 3,\n        draws: 0,\n        losses: 0\n      },\n      {\n        teamId: 2,\n        position: 2,\n        points: 7,\n        matchesPlayed: 3,\n        wins: 2,\n        draws: 1,\n        losses: 0\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: 'Classement Championnat régional',\n    tournamentId: 2,\n    teams: []\n  },\n  {\n    id: 3,\n    name: 'Classement Coupe des Champions',\n    tournamentId: 3,\n    teams: []\n  }\n];\n\n// Récupérer le classement pour un tournoi spécifique\nexport const getRankingByTournament = async (tournamentId) => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  const tid = parseInt(tournamentId, 10);\n  const ranking = mockRankings.find(r => r.tournamentId === tid);\n  \n  if (!ranking) {\n    throw new Error('Classement non trouvé');\n  }\n  \n  // Obtenir les détails complets des équipes\n  const teamsWithDetails = ranking.teams.map(teamRanking => {\n    const team = mockTeams.find(t => t.id === teamRanking.teamId);\n    return {\n      ...teamRanking,\n      team\n    };\n  });\n  \n  return {\n    ...ranking,\n    teamsWithDetails\n  };\n};\n\n// Mettre à jour le classement d'une équipe\nexport const updateTeamRanking = async (rankingId, teamId, updateData) => {\n  // Simuler une latence réseau\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  const rid = parseInt(rankingId, 10);\n  const tid = parseInt(teamId, 10);\n  \n  const ranking = mockRankings.find(r => r.id === rid);\n  if (!ranking) {\n    throw new Error('Classement non trouvé');\n  }\n  \n  // Trouver l'équipe dans le classement\n  const teamIndex = ranking.teams.findIndex(t => t.teamId === tid);\n  if (teamIndex === -1) {\n    // Si l'équipe n'existe pas dans le classement, l'ajouter\n    ranking.teams.push({\n      teamId: tid,\n      position: ranking.teams.length + 1,\n      points: updateData.points || 0,\n      matchesPlayed: updateData.matchesPlayed || 0,\n      wins: updateData.wins || 0,\n      draws: updateData.draws || 0,\n      losses: updateData.losses || 0\n    });\n  } else {\n    // Mettre à jour les statistiques de l'équipe\n    ranking.teams[teamIndex] = {\n      ...ranking.teams[teamIndex],\n      ...updateData\n    };\n  }\n  \n  // Recalculer les positions en fonction des points\n  ranking.teams.sort((a, b) => b.points - a.points);\n  ranking.teams.forEach((team, index) => {\n    team.position = index + 1;\n  });\n  \n  return { success: true };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}